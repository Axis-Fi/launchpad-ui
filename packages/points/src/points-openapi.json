{
  "openapi": "3.0.0",
  "info": {
    "title": "Axis Points Server",
    "version": "0.1.0"
  },
  "servers": [
    {
      "description": "Local",
      "url": "http://localhost:8081"
    },
    {
      "description": "Testnet",
      "url": "https://points-api-testnet.up.railway.app"
    }
  ],
  "tags": [
    {
      "description": "Endpoints for authenticating users.",
      "name": "Authentication"
    },
    {
      "description": "Endpoints for retrieving user and wallet points data.",
      "name": "Points"
    },
    {
      "description": "Endpoints for using the launch pre-registration system.",
      "name": "Launches"
    }
  ],
  "paths": {
    "/nonce": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Nonce has been created."
          },
          "500": {
            "description": "Error creating a nonce."
          }
        },
        "summary": "Get a nonce for a sign in request.",
        "tags": ["Authentication"]
      }
    },
    "/register": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "profile_image": {
                  "contentType": "image/png, image/jpeg",
                  "style": "form"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/RegistrationForm"
              }
            }
          },
          "description": "The Sign in With Ethereum message and signature.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTPair"
                }
              }
            },
            "description": "Successfully registered."
          },
          "400": {
            "description": "Bad Request - signature is invalid, nonce is invalid, domain unsupported, or chain is not supported."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Registers a new user. The wallet address being registered must not be registered already.",
        "tags": ["Authentication"]
      }
    },
    "/sign-in": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninData"
              }
            }
          },
          "description": "The Sign in With Ethereum message and signature.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTPair"
                }
              }
            },
            "description": "Successfully signed in."
          },
          "400": {
            "description": "Bad Request - signature is invalid, nonce is invalid, domain unsupported, or chain is not supported."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Signs the user in, creating and returning a JWT.",
        "tags": ["Authentication"]
      }
    },
    "/refresh": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The user's current refresh token.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTPair"
                }
              }
            },
            "description": "Successfully refreshed tokens."
          },
          "400": {
            "description": "Bad Request - refresh token provided is not valid."
          },
          "500": {
            "description": "Error refreshing tokens."
          }
        },
        "summary": "Checks a provided refresh token, returns a new access token and refresh token.",
        "tags": ["Authentication"]
      }
    },
    "/link": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninData"
              }
            }
          },
          "description": "The Sign in With Ethereum message and signature.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully linked wallet address."
          },
          "400": {
            "description": "Bad Request - access token is invalid, wallet address is invalid, or chain is not supported."
          },
          "500": {
            "description": "Error linking wallet address."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Links a new wallet to a user's account.",
        "tags": ["Authentication"]
      }
    },
    "/is_registered/{wallet_address}": {
      "get": {
        "parameters": [
          {
            "description": "The wallet address to check.",
            "explode": false,
            "in": "path",
            "name": "wallet_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the wallet address is registered."
          },
          "500": {
            "description": "Error checking wallet address."
          }
        },
        "summary": "Checks if a wallet address is registered.",
        "tags": ["Authentication"]
      }
    },
    "/available/{username}": {
      "get": {
        "parameters": [
          {
            "description": "The username to check.",
            "explode": false,
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the username is available."
          },
          "500": {
            "description": "Error checking username."
          }
        },
        "summary": "Checks if a username is available.",
        "tags": ["Authentication"]
      }
    },
    "/profile": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUserProfile"
                }
              }
            },
            "description": "The user's profile information."
          },
          "500": {
            "description": "Error retrieving profile information."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Retrieves the user's profile information, including points by category and total.",
        "tags": ["Points"]
      },
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "profile_image": {
                  "contentType": "image/png, image/jpeg",
                  "style": "form"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ProfileForm"
              }
            }
          },
          "description": "The user's new username and profile image url.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated profile information."
          },
          "400": {
            "description": "Bad Request - username is invalid or profile image url is invalid."
          },
          "500": {
            "description": "Error updating profile information."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Updates the user's profile information.",
        "tags": ["Points"]
      }
    },
    "/points/{wallet_address}": {
      "get": {
        "parameters": [
          {
            "description": "The wallet address to retrieve points for.",
            "explode": false,
            "in": "path",
            "name": "wallet_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletPoints"
                }
              }
            },
            "description": "The wallet's points information."
          },
          "500": {
            "description": "Error retrieving points information."
          }
        },
        "summary": "Retrieves the points information for a wallet address.",
        "tags": ["Points"]
      }
    },
    "/leaderboard": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserProfile"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The overall leaderboard."
          },
          "500": {
            "description": "Error retrieving leaderboard."
          }
        },
        "summary": "Retrieves the overall points leaderboard.",
        "tags": ["Points"]
      }
    },
    "/leaderboard/{phase}": {
      "get": {
        "parameters": [
          {
            "description": "The phase to retrieve the leaderboard for.",
            "explode": false,
            "in": "path",
            "name": "phase",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserProfile"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The leaderboard for the specified phase."
          },
          "500": {
            "description": "Error retrieving leaderboard."
          }
        },
        "summary": "Retrieves the leaderboard for a specific phase.",
        "tags": ["Points"]
      }
    },
    "/recent_joins": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserProfile"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The most recent 100 users to join."
          },
          "500": {
            "description": "Error retrieving recent joins."
          }
        },
        "summary": "Retrieves the most recent users 100 to join. Does not include points data for them.",
        "tags": ["Points"]
      }
    },
    "/launches": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Launch"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The list of launches."
          },
          "500": {
            "description": "Error retrieving launches."
          }
        },
        "summary": "Retrieves the list of all launches that have used the pre-registration system.",
        "tags": ["Launches"]
      }
    },
    "/launches/active": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Launch"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The list of active launches."
          },
          "500": {
            "description": "Error retrieving active launches."
          }
        },
        "summary": "Retrieves the list of all active launches that are using the pre-registration system.",
        "tags": ["Launches"]
      }
    },
    "/launches/register": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchRegistrationRequest"
              }
            }
          },
          "description": "The user's wallet address and commitment for the launch.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully registered for launch."
          },
          "400": {
            "description": "Bad Request - wallet address is invalid, commitment is invalid, launch is not active, or the user is already registered."
          },
          "500": {
            "description": "Error registering for launch."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Registers a user for a launch.",
        "tags": ["Launches"]
      }
    },
    "/launches/register/update": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchRegistration"
              }
            }
          },
          "description": "The user's wallet address and new commitment for the launch.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated commitment for launch."
          },
          "400": {
            "description": "Bad Request - wallet address is invalid, commitment is invalid, launch is not active, or the user is not registered."
          },
          "500": {
            "description": "Error updating commitment for launch."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Updates a user's commitment for a launch.",
        "tags": ["Launches"]
      }
    },
    "/launches/register/cancel": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchRegistration"
              }
            }
          },
          "description": "The user's wallet address and launch name.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully cancelled registration for launch."
          },
          "400": {
            "description": "Bad Request - wallet address is invalid, launch is not active, or the user is not registered."
          },
          "500": {
            "description": "Error cancelling registration for launch."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Cancels a user's registration for a launch.",
        "tags": ["Launches"]
      }
    },
    "/launches/registrations": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaunchRegistration"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The user's registrations for launches."
          },
          "500": {
            "description": "Error retrieving registrations for launches."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Retrieves the user's registrations for launches.",
        "tags": ["Launches"]
      }
    },
    "/launches/registrations/active": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaunchRegistration"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The user's registrations for active launches."
          },
          "500": {
            "description": "Error retrieving registrations for active launches."
          }
        },
        "security": [
          {
            "JWTAuthorization": []
          }
        ],
        "summary": "Retrieves the user's registrations for active launches.",
        "tags": ["Launches"]
      }
    }
  },
  "components": {
    "schemas": {
      "JWTPair": {
        "description": "A JSON object containing two string fields, access_token and refresh_token.",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SigninData": {
        "description": "A JSON object containing two string fields, a Sign in With Ethereum message and signature. The nonce found in the decoded signature should match the nonce in the message.",
        "properties": {
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistrationForm": {
        "description": "A multipart form object that contains an image file and a json of the fields required for registration, a Sign in With Ethereum message, signature, username, and a referrer address. The nonce found in the decoded signature should match the nonce in the message.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RegistrationForm_data"
          },
          "profile_image": {
            "format": "binary",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfileForm": {
        "description": "A multipart form object containing the user's username and profile image.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProfileForm_data"
          },
          "profile_image": {
            "format": "binary",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfile": {
        "description": "A JSON object containing the user's profile information, including points by category and total.",
        "properties": {
          "username": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          },
          "ref_points": {
            "type": "integer"
          },
          "bid_points": {
            "type": "integer"
          },
          "total_points": {
            "type": "integer"
          },
          "rank": {
            "type": "integer"
          },
          "joined": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FullUserProfile": {
        "description": "A JSON object containing the user's profile information, including points by category and total, and detailed wallet information.",
        "properties": {
          "username": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          },
          "points": {
            "$ref": "#/components/schemas/FullUserProfile_points"
          },
          "wallets": {
            "items": {
              "$ref": "#/components/schemas/WalletPoints"
            },
            "type": "array"
          },
          "activities": {
            "$ref": "#/components/schemas/FullUserProfile_activities"
          },
          "rank": {
            "type": "integer"
          },
          "joined": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Points": {
        "description": "A JSON object containing points information.",
        "properties": {
          "ref_points": {
            "type": "integer"
          },
          "bid_points": {
            "type": "integer"
          },
          "total_points": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WalletPoints": {
        "description": "A JSON object containing points information for a wallet address.",
        "properties": {
          "address": {
            "type": "string"
          },
          "ref_points": {
            "type": "integer"
          },
          "bid_points": {
            "type": "integer"
          },
          "total_points": {
            "type": "integer"
          },
          "activities": {
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Activity": {
        "description": "A JSON object containing information about an activity.",
        "properties": {
          "address": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "phase": {
            "type": "integer"
          },
          "activity_type": {
            "type": "string"
          },
          "contribution": {
            "type": "integer"
          },
          "multiplier": {
            "type": "float"
          },
          "points": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Launch": {
        "description": "A JSON object containing information about a launch.",
        "properties": {
          "name": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer"
          },
          "deadline": {
            "format": "date-time",
            "type": "string"
          },
          "website_url": {
            "type": "string"
          },
          "twitter_url": {
            "type": "string"
          },
          "discord_url": {
            "type": "string"
          },
          "project_logo_url": {
            "type": "string"
          },
          "project_banner_url": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valuation": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LaunchRegistration": {
        "description": "A JSON object containing information about a user's registration for a launch.",
        "properties": {
          "id": {
            "type": "integer"
          },
          "launch_name": {
            "type": "string"
          },
          "wallet_address": {
            "type": "string"
          },
          "commitment": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LaunchRegistrationRequest": {
        "description": "A JSON object containing information about a user's registration request for a launch.",
        "properties": {
          "launch_name": {
            "type": "string"
          },
          "wallet_address": {
            "type": "string"
          },
          "commitment": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RegistrationForm_data": {
        "properties": {
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfileForm_data": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FullUserProfile_points": {
        "properties": {
          "0": {
            "$ref": "#/components/schemas/Points"
          },
          "1": {
            "$ref": "#/components/schemas/Points"
          },
          "2": {
            "$ref": "#/components/schemas/Points"
          }
        },
        "type": "object"
      },
      "FullUserProfile_activities": {
        "properties": {
          "0": {
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          },
          "1": {
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          },
          "2": {
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "JWTAuthorization": {
        "bearerFormat": "JWT",
        "description": "JWT Bearer Token",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}
