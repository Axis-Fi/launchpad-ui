/* tslint:disable */
/* eslint-disable */
/**
 * Axis Points Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  FullUserProfile,
  ProfileFormData,
  UserProfile,
  WalletPoints,
} from "../models/index";
import {
  FullUserProfileFromJSON,
  FullUserProfileToJSON,
  ProfileFormDataFromJSON,
  ProfileFormDataToJSON,
  UserProfileFromJSON,
  UserProfileToJSON,
  WalletPointsFromJSON,
  WalletPointsToJSON,
} from "../models/index";

export interface LeaderboardPhaseGetRequest {
  phase: number;
}

export interface PointsWalletAddressGetRequest {
  walletAddress: string;
}

export interface ProfilePostRequest {
  data?: ProfileFormData;
  profileImage?: Blob;
}

/**
 *
 */
export class PointsApi extends runtime.BaseAPI {
  /**
   * Retrieves the overall points leaderboard.
   */
  async leaderboardGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<UserProfile>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/leaderboard`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserProfileFromJSON),
    );
  }

  /**
   * Retrieves the overall points leaderboard.
   */
  async leaderboardGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<UserProfile>> {
    const response = await this.leaderboardGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieves the leaderboard for a specific phase.
   */
  async leaderboardPhaseGetRaw(
    requestParameters: LeaderboardPhaseGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<UserProfile>>> {
    if (
      requestParameters.phase === null ||
      requestParameters.phase === undefined
    ) {
      throw new runtime.RequiredError(
        "phase",
        "Required parameter requestParameters.phase was null or undefined when calling leaderboardPhaseGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/leaderboard/{phase}`.replace(
          `{${"phase"}}`,
          encodeURIComponent(String(requestParameters.phase)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserProfileFromJSON),
    );
  }

  /**
   * Retrieves the leaderboard for a specific phase.
   */
  async leaderboardPhaseGet(
    requestParameters: LeaderboardPhaseGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<UserProfile>> {
    const response = await this.leaderboardPhaseGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieves the points information for a wallet address.
   */
  async pointsWalletAddressGetRaw(
    requestParameters: PointsWalletAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WalletPoints>> {
    if (
      requestParameters.walletAddress === null ||
      requestParameters.walletAddress === undefined
    ) {
      throw new runtime.RequiredError(
        "walletAddress",
        "Required parameter requestParameters.walletAddress was null or undefined when calling pointsWalletAddressGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/points/{wallet_address}`.replace(
          `{${"wallet_address"}}`,
          encodeURIComponent(String(requestParameters.walletAddress)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WalletPointsFromJSON(jsonValue),
    );
  }

  /**
   * Retrieves the points information for a wallet address.
   */
  async pointsWalletAddressGet(
    requestParameters: PointsWalletAddressGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WalletPoints> {
    const response = await this.pointsWalletAddressGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieves the user\'s profile information, including points by category and total.
   */
  async profileGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FullUserProfile>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/profile`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FullUserProfileFromJSON(jsonValue),
    );
  }

  /**
   * Retrieves the user\'s profile information, including points by category and total.
   */
  async profileGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FullUserProfile> {
    const response = await this.profileGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Updates the user\'s profile information.
   */
  async profilePostRaw(
    requestParameters: ProfilePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.data !== undefined) {
      formParams.append(
        "data",
        new Blob(
          [JSON.stringify(ProfileFormDataToJSON(requestParameters.data))],
          { type: "application/json" },
        ),
      );
    }

    if (requestParameters.profileImage !== undefined) {
      formParams.append("profile_image", requestParameters.profileImage as any);
    }

    const response = await this.request(
      {
        path: `/profile`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates the user\'s profile information.
   */
  async profilePost(
    requestParameters: ProfilePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.profilePostRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves the most recent users 100 to join. Does not include points data for them.
   */
  async recentJoinsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<UserProfile>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/recent_joins`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserProfileFromJSON),
    );
  }

  /**
   * Retrieves the most recent users 100 to join. Does not include points data for them.
   */
  async recentJoinsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<UserProfile>> {
    const response = await this.recentJoinsGetRaw(initOverrides);
    return await response.value();
  }
}
