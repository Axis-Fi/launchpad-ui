/* tslint:disable */
/* eslint-disable */
/**
 * Axis Points Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Launch,
  LaunchRegistration,
  LaunchRegistrationRequest,
} from "../models/index";
import {
  LaunchFromJSON,
  LaunchToJSON,
  LaunchRegistrationFromJSON,
  LaunchRegistrationToJSON,
  LaunchRegistrationRequestFromJSON,
  LaunchRegistrationRequestToJSON,
} from "../models/index";

export interface LaunchesRegisterCancelPostRequest {
  launchRegistration: LaunchRegistration;
}

export interface LaunchesRegisterPostRequest {
  launchRegistrationRequest: LaunchRegistrationRequest;
}

export interface LaunchesRegisterUpdatePostRequest {
  launchRegistration: LaunchRegistration;
}

/**
 *
 */
export class LaunchesApi extends runtime.BaseAPI {
  /**
   * Retrieves the list of all active launches that are using the pre-registration system.
   */
  async launchesActiveGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Launch>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/launches/active`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LaunchFromJSON),
    );
  }

  /**
   * Retrieves the list of all active launches that are using the pre-registration system.
   */
  async launchesActiveGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Launch>> {
    const response = await this.launchesActiveGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieves the list of all launches that have used the pre-registration system.
   */
  async launchesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Launch>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/launches`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LaunchFromJSON),
    );
  }

  /**
   * Retrieves the list of all launches that have used the pre-registration system.
   */
  async launchesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Launch>> {
    const response = await this.launchesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Cancels a user\'s registration for a launch.
   */
  async launchesRegisterCancelPostRaw(
    requestParameters: LaunchesRegisterCancelPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.launchRegistration === null ||
      requestParameters.launchRegistration === undefined
    ) {
      throw new runtime.RequiredError(
        "launchRegistration",
        "Required parameter requestParameters.launchRegistration was null or undefined when calling launchesRegisterCancelPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/launches/register/cancel`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LaunchRegistrationToJSON(requestParameters.launchRegistration),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Cancels a user\'s registration for a launch.
   */
  async launchesRegisterCancelPost(
    requestParameters: LaunchesRegisterCancelPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.launchesRegisterCancelPostRaw(requestParameters, initOverrides);
  }

  /**
   * Registers a user for a launch.
   */
  async launchesRegisterPostRaw(
    requestParameters: LaunchesRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.launchRegistrationRequest === null ||
      requestParameters.launchRegistrationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "launchRegistrationRequest",
        "Required parameter requestParameters.launchRegistrationRequest was null or undefined when calling launchesRegisterPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      ("");
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);
      console.log({ tokenString });
      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    console.log({ headerParameters });
    const response = await this.request(
      {
        path: `/launches/register`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LaunchRegistrationRequestToJSON(
          requestParameters.launchRegistrationRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Registers a user for a launch.
   */
  async launchesRegisterPost(
    requestParameters: LaunchesRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.launchesRegisterPostRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s commitment for a launch.
   */
  async launchesRegisterUpdatePostRaw(
    requestParameters: LaunchesRegisterUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.launchRegistration === null ||
      requestParameters.launchRegistration === undefined
    ) {
      throw new runtime.RequiredError(
        "launchRegistration",
        "Required parameter requestParameters.launchRegistration was null or undefined when calling launchesRegisterUpdatePost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/launches/register/update`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LaunchRegistrationToJSON(requestParameters.launchRegistration),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s commitment for a launch.
   */
  async launchesRegisterUpdatePost(
    requestParameters: LaunchesRegisterUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.launchesRegisterUpdatePostRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves the user\'s registrations for active launches.
   */
  async launchesRegistrationsActiveGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<LaunchRegistration>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/launches/registrations/active`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LaunchRegistrationFromJSON),
    );
  }

  /**
   * Retrieves the user\'s registrations for active launches.
   */
  async launchesRegistrationsActiveGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<LaunchRegistration>> {
    const response =
      await this.launchesRegistrationsActiveGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieves the user\'s registrations for launches.
   */
  async launchesRegistrationsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<LaunchRegistration>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("JWTAuthorization", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/launches/registrations`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LaunchRegistrationFromJSON),
    );
  }

  /**
   * Retrieves the user\'s registrations for launches.
   */
  async launchesRegistrationsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<LaunchRegistration>> {
    const response = await this.launchesRegistrationsGetRaw(initOverrides);
    return await response.value();
  }
}
